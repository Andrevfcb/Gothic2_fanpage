{"version":3,"sources":["Components/Body/CharacterCard.js","Components/Body/Characters.js"],"names":["CharacterCard","id","name","image","to","className","src","process","alt","Characters","useHttpClient","isLoading","sendRequest","error","clearError","useState","characters","setCharacters","allCharacters","setAllCharacters","charactersSearchValue","setCharactersSearchValue","useEffect","window","scrollTo","fetchCharacters","a","responseData","value","placeholder","onChange","e","target","inputValue","toLowerCase","filteredCharacters","filter","char","includes","LoadingSpinner","asOverlay","length","characters_informations","sort","b","map","description","intresting_facts","characterList"],"mappings":"oMAceA,EAXO,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC9B,OACI,cAAC,IAAD,CAAMC,GAAE,sBAAiBH,GAAzB,SACI,sBAAKI,UAAU,iBAAf,UACI,qBAAKC,IAAG,UAAKC,kCAAL,YAA0CJ,GAASK,IAAKN,IAChE,4BAAIA,U,wBCwDLO,UAvDI,WAEf,MAAsDC,cAA9CC,EAAR,EAAQA,UAAkBC,GAA1B,EAAmBC,MAAnB,EAA0BD,aAE1B,GAFA,EAAuCE,WAEHC,mBAAS,KAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CF,qBAA1C,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0DJ,mBAAS,IAAnE,mBAAOK,EAAP,KAA8BC,EAA9B,KAEAC,qBAAU,WACNC,OAAOC,SAAS,EAAG,GACnB,IAAMC,EAAe,uCAAG,4BAAAC,EAAA,+EAEed,EAAY,GAAD,OACnCL,kCADmC,qBAF1B,OAENoB,EAFM,OAKhBV,EAAcU,EAAaX,YAC3BG,EAAiBQ,EAAaX,YANd,yGAAH,qDASjBS,MACL,CAACb,IAoBJ,OACI,sBAAKP,UAAU,aAAf,UACI,qBAAKA,UAAU,mBAAf,SACI,8CAGJ,uBAAOuB,MAAOR,EAAuBS,YAAY,SAASC,SAb9C,SAACC,GACjBV,EAAyBU,EAAEC,OAAOJ,OAClC,IAAMK,EAAaF,EAAEC,OAAOJ,MAAMM,cAC5BC,EAAqBjB,EAAckB,QAAO,SAAAC,GAAI,OAAIA,EAAKnC,KAAKgC,cAAcI,SAASL,MACzFhB,EAAckB,MAUV,sBAAK9B,UAAU,kBAAf,UACCM,GAAa,cAAC4B,EAAA,EAAD,CAAgBC,WAAS,IAClCxB,EAAWyB,OAAS,EA3BX,WAClB,IAAIC,EAON,OALK1B,IAEH0B,EADiB1B,EAAW2B,MAAK,SAACjB,EAAGkB,GAAJ,OAAUlB,EAAExB,KAAO0C,EAAE1C,KAAO,GAAK,KACzB2C,KAAI,SAAAR,GACzC,OAAQ,cAAC,EAAD,CAA6BpC,GAAIoC,EAAKpC,GAAIC,KAAMmC,EAAKnC,KAAMC,MAAOkC,EAAKlC,MAAO2C,YAAaT,EAAKS,YAAaC,iBAAkBV,EAAKU,kBAAhHV,EAAKpC,QAEhCyC,EAmB4BM,GAAmB","file":"static/js/5.8c83d498.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CharacterCard = ({id, name, image}) => {\r\n    return (\r\n        <Link to={`/characters/${id}`}>\r\n            <div className=\"character-card\">\r\n                <img src={`${process.env.REACT_APP_BACKEND_URL}/${image}`} alt={name}></img>\r\n                <p>{name}</p>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default CharacterCard\r\n","import React, {useState, useEffect} from 'react';\r\nimport \"./Characters.css\";\r\nimport CharacterCard from \"./CharacterCard\";\r\nimport Input from '../FormElements/Input';\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\"\r\n\r\n\r\n\r\nconst Characters = () => {\r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    const [characters, setCharacters] = useState([]);\r\n    const [allCharacters, setAllCharacters] = useState();\r\n    const [charactersSearchValue, setCharactersSearchValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n        const fetchCharacters = async () => {\r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/characters/`\r\n                  );\r\n                setCharacters(responseData.characters)\r\n                setAllCharacters(responseData.characters)\r\n                } catch (err) {}\r\n            }\r\n            fetchCharacters()\r\n    }, [sendRequest])\r\n\r\n    const characterList = () => {\r\n        let characters_informations\r\n        let sortCharacters\r\n        if(characters) {\r\n        sortCharacters = characters.sort((a, b) => a.name > b.name ? 1 : -1)\r\n        characters_informations = sortCharacters.map(char => {\r\n            return (<CharacterCard key={char.id} id={char.id} name={char.name} image={char.image} description={char.description} intresting_facts={char.intresting_facts}  />)\r\n    })\r\n    } return characters_informations\r\n    }\r\n\r\n    const inputChange = (e) => {\r\n        setCharactersSearchValue(e.target.value)\r\n        const inputValue = e.target.value.toLowerCase()\r\n        const filteredCharacters = allCharacters.filter(char => char.name.toLowerCase().includes(inputValue))\r\n        setCharacters(filteredCharacters)\r\n    }\r\n\r\n    return (\r\n        <div className=\"characters\">\r\n            <div className=\"characters-image\">\r\n                <h1>Characters</h1>\r\n            </div>\r\n            {/* <Input element=\"input\" value={charactersSearchValue} placeholder=\"search\" onInput={inputChange} /> */}\r\n            <input value={charactersSearchValue} placeholder=\"search\" onChange={inputChange} />\r\n            <div className=\"characters-list\">\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n                {characters.length > 0 ? characterList() : (<p>No characters found</p>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Characters\r\n"],"sourceRoot":""}