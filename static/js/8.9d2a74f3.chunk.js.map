{"version":3,"sources":["Components/Body/Item.js"],"names":["Item","useHttpClient","isLoading","error","sendRequest","clearError","useState","item","setItem","itemPrice","setItemPrice","quantity","setQuantity","imgNum","setImgNum","isButtonMinusDisabled","setIsButtonMinusDisabled","isButtonPlusDisabled","setIsButtonPlusDisabled","auth","useContext","AuthContext","itemImage","useRef","itemContainer","iid","useParams","uid","userId","useEffect","window","scrollTo","fetchItem","a","process","responseData","price","changeQuantity","e","newQuantity","newPrice","target","value","disabledPlusButton","disabledMinusButton","disabledButton","addToCart","JSON","stringify","cartItems","product","id","Authorization","token","Fragment","onClear","className","asOverlay","name","ref","src","images","img","alt","onMouseMove","clientX","current","offsetLeft","clientY","getBoundingClientRect","top","offsetWidth","offsetHeight","style","transform","onMouseLeave","map","i","onClick","description","disabled"],"mappings":"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","file":"static/js/8.9d2a74f3.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, useContext } from 'react';\r\nimport \"./Item.css\";\r\n\r\nimport ErrorModal from '../UIElements/ErrorModal';\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\"\r\nimport { AuthContext } from '../context/auth-context';\r\n\r\nimport {\r\n    useParams\r\n  } from \"react-router-dom\";\r\nimport Button from '../FormElements/Button';\r\n  \r\n\r\nconst Item = () => {\r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [item, setItem] = useState();\r\n    const [itemPrice, setItemPrice] = useState();\r\n    const [quantity, setQuantity] = useState(1);\r\n    const [imgNum, setImgNum] = useState(0);\r\n    const [isButtonMinusDisabled, setIsButtonMinusDisabled] = useState(false);\r\n    const [isButtonPlusDisabled, setIsButtonPlusDisabled] = useState(false);\r\n    const auth = useContext(AuthContext);\r\n\r\n    const itemImage = useRef();\r\n    const itemContainer = useRef();\r\n\r\n    let { iid } = useParams();\r\n    const uid = auth.userId\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n        const fetchItem = async () => {\r\n                try {\r\n                    const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/api/items/${iid}`\r\n                  );\r\n                  setItem(responseData.item)\r\n                  setItemPrice(responseData.item.price)\r\n                } catch (err) {}\r\n            }\r\n            fetchItem()\r\n    }, [sendRequest])\r\n\r\n    const disabledButton = (e) => {\r\n        const value = e.target.value\r\n        let disabledPlusButton = false\r\n        let disabledMinusButton = false\r\n        if (value === \"+\") {\r\n            if (item && (quantity + 1) === item.quantity) {\r\n                disabledPlusButton = true\r\n            } else {\r\n                disabledPlusButton = false\r\n            }\r\n        } else {\r\n            if (item && (quantity - 1) === 0) {\r\n                disabledMinusButton = true\r\n            } else {\r\n                disabledMinusButton = false\r\n            }\r\n        }\r\n            setIsButtonPlusDisabled(disabledPlusButton)\r\n            setIsButtonMinusDisabled(disabledMinusButton)\r\n    }\r\n\r\n    const changeQuantity = (e) => {\r\n        const value = e.target.value\r\n        let newQuantity\r\n        let newPrice\r\n        if (value === \"+\") {\r\n            newQuantity = quantity + 1\r\n        } else {\r\n            newQuantity = quantity - 1\r\n        }\r\n        newPrice = newQuantity * item.price\r\n        setQuantity(newQuantity)\r\n        setItemPrice(newPrice)\r\n        disabledButton(e)\r\n    }\r\n\r\n    const scaleImage = (e) => {\r\n        \r\n        let clientX = e.clientX - itemImage.current.offsetLeft\r\n        let clientY = e.clientY - itemImage.current.getBoundingClientRect().top\r\n        \r\n        const iWidth = itemImage.current.offsetWidth\r\n        const iHeight = itemImage.current.offsetHeight\r\n        \r\n        clientX = clientX / iWidth * 100\r\n        clientY = clientY / iHeight * 100\r\n\r\n        e.target.style.transform = \"translate(-\" + clientX + \"%, -\" + clientY + \"%) scale(2)\"\r\n    }\r\n\r\n    const resetScaleImage = (e) => {\r\n        e.target.style.transform = \"translate(-50%, -50%) scale(1)\"\r\n    }\r\n\r\n    const itemImages = () => {\r\n        const images = item.images.map((i, id)=> {\r\n            return (<img src={`${process.env.REACT_APP_BACKEND_URL}/${i.img}`} \r\n            alt={item.name}\r\n            onClick={() => {\r\n                setImgNum(id)\r\n            }} \r\n            className={imgNum === id && \"active\"}\r\n            ></img>)\r\n        })\r\n        return images\r\n        \r\n    }\r\n\r\n    const addToCart = async () => {\r\n        \r\n        if (item) {\r\n            try {\r\n                await sendRequest(\r\n                  `${process.env.REACT_APP_BACKEND_URL}/api/cart/${uid}`,\r\n                  'POST',\r\n                  JSON.stringify({\r\n                      cartItems: {\r\n                        product: item.id,\r\n                        quantity: quantity,\r\n                        price: itemPrice\r\n                      }\r\n                  }),\r\n                  {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + auth.token\r\n                  }\r\n                );\r\n                \r\n              } catch (err) {}\r\n        }\r\n        \r\n    }\r\n\r\n   \r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n        <div className=\"item\">\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n            <div className=\"item-image\">\r\n                <h1>{item && item.name}</h1>\r\n            </div>\r\n            <div className=\"item-container\" ref={itemContainer}>\r\n                <div className=\"item-container__image\">\r\n                    <div className=\"item-container__image-main\"\r\n                    ref={itemImage}\r\n                    >\r\n                        {item && <img src={`${process.env.REACT_APP_BACKEND_URL}/${item.images[imgNum].img}`} alt={item.name} \r\n                        onMouseMove={scaleImage}\r\n                        onMouseLeave={resetScaleImage}></img>}\r\n                    </div>\r\n                    <div className=\"item-container__image-rest\">\r\n                    {item && itemImages()}\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-container__info\">\r\n                    <h2>Item informations</h2>\r\n                    <p>Name: <span>{item && item.name}</span></p>\r\n                    <p>Description: <span>{item && item.description}</span></p>\r\n                    <p>Quantity: <span>{item && item.quantity}</span></p>\r\n                    <p>Price: <span>{item && item.price} $</span></p>\r\n                    <br/>\r\n                    <div className=\"item-container__info-quantity\">\r\n                        <h3>Choose quantity and buy!</h3>\r\n                            <div>\r\n                            <button value=\"-\" className=\"button-quantity\" onClick={changeQuantity} disabled={isButtonMinusDisabled}>-</button>\r\n                            <span>{quantity}</span>\r\n                            <button value=\"+\" className=\"button-quantity\" onClick={changeQuantity} disabled={isButtonPlusDisabled}>+</button>\r\n                            </div>\r\n                    <p><Button onClick={addToCart}>ADD TO CART</Button></p>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Item\r\n"],"sourceRoot":""}